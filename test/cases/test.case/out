{
  "result": 10,
  "reserved": {
    "def": "function interpretDefinition(params, context) {\n  if (params.length != 2) {\n    (0, _logger.ERROR)(`Interpreter: Incorrect number of arguments for definition. Expected: 2, Received: ${params.length}`);\n  } else if (params[0].type != 'identifier') {\n    (0, _logger.ERROR)(`Interpreter: Tried to write a definition to a non-identifier ${params[0]}!`);\n  } else if (typeof params[0].value === 'string') {\n    const newContext = interpret(params[1], context);\n    return (0, _context.setResult)((0, _context.addDefinition)(newContext, params[0].value, (0, _context.getResult)(newContext)), params[0].value);\n  }\n\n  (0, _logger.ERROR)(`Interpreter: Tried to define to an array of nodes: ${params[0]}`);\n  return _context.emptyContext;\n}",
    "print": "function interpretPrint(params, context) {\n  if (params.length > 1) {\n    (0, _logger.ERROR)(`Interpreter: Tried to print too many params! Expected: 1, Received: ${params.length}`);\n  }\n\n  const newContext = interpret(params[0], context);\n  (0, _logger.PRINT)((0, _context.getResult)(newContext));\n  return newContext;\n}",
    "true": true,
    "false": false,
    "if": "function interpretConditional(params, context) {\n  for (let i = 0; i + 1 < params.length; i += 2) {\n    const conditionalContext = interpret(params[i], context);\n\n    if (conditionalContext?.result) {\n      return interpret(params[i + 1], conditionalContext);\n    }\n  }\n\n  const hasElse = params.length % 2;\n\n  if (hasElse) {\n    return interpret(params[params.length - 1], context);\n  }\n}"
  },
  "memory": {}
}